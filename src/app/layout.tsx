import { MainLayout } from "@/layouts/MainLayout";
import { AppRouterCacheProvider } from "@mui/material-nextjs/v14-appRouter";
import type { Metadata } from "next";
import localFont from "next/font/local";
import { Toaster } from "react-hot-toast";
import "./globals.css";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

const helveticaBold = localFont({
  src: "./fonts/helvetica-255/Helvetica-Bold.ttf",
  variable: "--font-helvetica-bold",
  weight: "bold",
});
const helveticaBoldOblique = localFont({
  src: "./fonts/helvetica-255/Helvetica-BoldOblique.ttf",
  variable: "--font-helvetica-bold-oblique",
  weight: "bold oblique",
});
const helveticaCompressed = localFont({
  src: "./fonts/helvetica-255/helvetica-compressed-5871d14b6903a.otf",
  variable: "--font-helvetica-compressed",
});
const helveticaLight = localFont({
  src: "./fonts/helvetica-255/helvetica-light-587ebe5a59211.ttf",
  variable: "--font-helvetica-light",
  weight: "300",
});
const helveticaOblique = localFont({
  src: "./fonts/helvetica-255/Helvetica-Oblique.ttf",
  variable: "--font-helvetica-oblique",
  weight: "oblique",
});
const helveticaRoundedBold = localFont({
  src: "./fonts/helvetica-255/helvetica-rounded-bold-5871d05ead8de.otf",
  variable: "--font-helvetica-rounded-bold",
  weight: "bold",
});
const helveticaRegular = localFont({
  src: "./fonts/helvetica-255/Helvetica.ttf",
  variable: "--font-helvetica-regular",
  weight: "normal",
});

export const metadata: Metadata = {
  title: "JSBN++",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable}
          ${helveticaBold.variable}
          ${helveticaBoldOblique.variable}
          ${helveticaCompressed.variable}
          ${helveticaLight.variable}
          ${helveticaOblique.variable}
          ${helveticaRoundedBold.variable}
          ${helveticaRegular.variable}
          antialiased`}
      >
        <Toaster />
        <AppRouterCacheProvider>
          <MainLayout>{children}</MainLayout>
        </AppRouterCacheProvider>
      </body>
    </html>
  );
}
